@page "/items/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorMarkedsplads.Models
@inject IDbContextFactory<BlazorMarkedsplads.OtakuMarketDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Item</h2>
    <hr />
    @if (item is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ItemName</dt>
            <dd class="col-sm-10">@item.ItemName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ItemType</dt>
            <dd class="col-sm-10">@item.ItemType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rarity</dt>
            <dd class="col-sm-10">@item.Rarity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DamageMin</dt>
            <dd class="col-sm-10">@item.DamageMin</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DamageMax</dt>
            <dd class="col-sm-10">@item.DamageMax</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@item.ImageUrl</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@item.Description</dd>
        </dl>
        <EditForm method="post" Model="item" OnValidSubmit="DeleteItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(item is null)">Delete</button> |
            <a href="/items">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Item? item;

    [SupplyParameterFromQuery]
    private int ItemId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        item = await context.Items.FirstOrDefaultAsync(m => m.ItemId == ItemId);

        if (item is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Items.Remove(item!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/items");
    }
}
